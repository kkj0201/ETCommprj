
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.net.*;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import javWa.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.JTextField;

public class ET_DataServer {

	public static void main(String[] args) throws IOException {
		int Port_Number = 5000; // port Number
		ServerSocket ss = new ServerSocket(Port_Number);
		SocketAddress address = new InetSocketAddress("localhoat", 5000);
		////////////////////////////////////////////////
		System.out.println("접속대기중 ...");
		Socket socket = ss.accept();
		
		try 
		{	
			while(true)	
			{
				socket = ss.accept();
				System.out.println("client" + socket + "접속완료");

				InputStream is = null;
				InputStreamReader isr = null;
				BufferedReader input = null; 
				is = socket.getInputStream();
				isr = new InputStreamReader(is);
				input = new BufferedReader(isr);
				//input = new BufferedReader(new InputStreamReader(socket.getInputStream()));
				//BufferedWriter output = null;
				//output = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
				//output.write("1234");
				String res = ""; 
				
				while(true)
				{
					res = input.readLine();
					System.out.println(is);
					System.out.println(isr);
					System.out.println(input);
					if(res == null)
					{
						System.out.println("check _ 02 ");
						break;
					} else	
					{
						System.out.print("check _ 01 : ");
						System.out.println(res);
						res = "";
					}
				}
				System.out.println("check _ 03" );
				System.out.println("Client" + socket.getInetAddress() + "접속종료");
			}			
		} catch(Exception e) {
			System.err.println(e);
			socket.close();
			ss.close();
		} finally {
			socket.close();
			ss.close();
		}
	}
}

//System.out.println("클라이언트로부터 받은 데이터 " + res);
///////////////////////////////////////////////////////////////
//// 클라이언트에 메시지보내기
////PrintWriter output = new PrintWriter(socket.getOutputStream(), true);
////output.write("Hello Client");
////output.newLine();
//
////input.close();
////output.close();
////////////////////////////////////////////////////////////////
//
////socket.close();
//
//// 메시지 검증하기
//
////while(res != null)
////{
////	System.out.println(res);	
////}
////int chr = input.read();//  input.readLine();
//
//
////System.out.println(chr);
////System.out.printf("%X", chr);
//
////DataStoring.FILE_DataStore(res);	// 파일 데이터 저장
////DataStoring.SQL_DataStore(res);	// 데이터베이스 데이터 저장
////DataParsing.Parsing(res);
//
//
//////////////////// GUI /////////////////
///*
// * JFrame f = new JFrame(); f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
//	 * //f.add() f.setSize(500, 400); f.setVisible(true);
// */
//

class MyPanel extends JPanel implements ActionListener
{
	JTextField a, b, c;
	double A, B, C;
	
	public MyPanel()
	{
		
	}
	JButton button = new JButton("Draw");
	//add(button);

	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		repaint();
	}
}

class DataStoring{
	// 파일시스템 데이터 저장
	public static void FILE_DataStore(String str) throws IOException
	{	
		FileWriter outputStream = null;
		SimpleDateFormat format1 = new SimpleDateFormat("yyyyMMdd");
		Date time = new Date();
		
		String time1 = format1.format(time);
		try {
			// 저장할때 날짜로 정리할것.
			// 파일명 , true를 해주지않으면 새파일로 덮어 써버린다.
			outputStream = new FileWriter("c:\\Data\\" + time1 + ".txt",true);
					
			outputStream.write(str + "\r\n");
			outputStream.flush();

		} finally {
			if (outputStream != null ) {
				outputStream.close();
			}
		}
	}
	// 데이터베이스 데이터 저장
	public static void SQL_DataStore(String str) throws IOException
	{	
		Connection conn = null;
		Statement stmt = null;
		try {
			
		} catch(SQLException e)
		{
			e.printStackTrace();
		}
	}

}

class DataParsing{
	// 그래프에 그릴시 데이터를 얻어오기위한 ArrayList 
	
	
	/*
	String ET_Date;
	String ET_Time;
	String ET_KVDC;
	String ET_KVDC_peak;
	String ET_Current;
	String ET_Dust;
	String ET_Spark;
	String ET_Arc;
	String ET_Curr_Limit;
	String ET_Volt_Limit;
	String ET_On_Time;
	String ET_Off_Time;
	*/
	public static void Parsing(String str1)
	{
		/*
		 * int Field_Lb_Start = str1.indexOf("Date"); int idx = str1.indexOf(",");
		 */
	//	String Field_Str;
		String Data_Str[] = str1.split(",");
		
		for(int i = 0 ; i<Data_Str.length; i++) {
			System.out.println(Data_Str[i]);
		}
		
	}
	
	public static void DataSheet(String str1)
	{
		ArrayList<String> ET_Data_Total = new ArrayList<>();
		String ET_Data;
		ET_Data = "test";
		ET_Data_Total.add(ET_Data);
		
	}
}

